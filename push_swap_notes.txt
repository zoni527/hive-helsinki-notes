# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    push_swap_notes.txt                                :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jvarila <jvarila@student.hive.fi>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/12/13 14:24:42 by jvarila           #+#    #+#              #
#    Updated: 2024/12/13 14:38:33 by jvarila          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

--------------------------------------------------------------------------------
PUSH SWAP
---------
Project parts:
	- User input handling
		- Error detection
	- Operating of underlying data type
	- Implementation the set of allowed operations using the allowed
	  operations of the underlying data type
	- Solving for a correct sorting sequence
		- Look into or explore possible algorhitms
	- Output
--------------------------------------------------------------------------------
Underlying data type
--------------------
Stack
	- Allowed operations are push and pop, maybe peek
	- Singly linked list, top is the tail
		- Fast insertion and popping
		- Store length
--------------------------------------------------------------------------------
Programming approach
--------------------
Object oriented or functional?
--------------------------------------------------------------------------------
The two stacks
--------------
Should I have the operations as member functions or functions that take two
pointer arguments?
--------------------------------------------------------------------------------
sa
--
	-1	<-\	=>		 2
	 2	<-/	=>		-1
	 5		=>		 5
	-3		=>		-3
	 8		=>		 8
	--		--		--
   Stack A		sa	   Stack A
--------------------------------------------------------------------------------
sb
--
	 6	<-\	=>		42
	42	<-/	=>		 6
	 0		=>		 0
	-7		=>		-7
	-9		=>		-9
	--		=>		--
   Stack B		sb	   Stack B
--------------------------------------------------------------------------------
ss
--
	-1	<-\	 6	<-\	=>		 2		42
	 2	<-/	42	<-/	=>		-1		 6
	 5		 0		=>		 5		 0
	-3		-7		=>		-3		-7
	 8		-9		=>		 8		-9
	--		--		=>		--		--
   Stack A	   Stack B		ss	   Stack A	   Stack B
--------------------------------------------------------------------------------
pa
--
	      ___________
	   <-/		 \	=>		 6
	-1		 6	=>		-1
	 2		42	=>		 2		42
	 5		 0	=>		 5		 0
	-3		-7	=>		-3		-7
	 8		-9	=>		 8		-9
	--		--	=>		--		--
   Stack A	   Stack B	ss	   Stack A	   Stack B
--------------------------------------------------------------------------------
pb
--
	  ___________
	 /	     \->	=>				-1
	-1		 6	=>				 6
	 2		42	=>		 2		42
	 5		 0	=>		 5		 0
	-3		-7	=>		-3		-7
	 8		-9	=>		 8		-9
	--		--	=>		--		--
   Stack A	   Stack B	ss	   Stack A	   Stack B
